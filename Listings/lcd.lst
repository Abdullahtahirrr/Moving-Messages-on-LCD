C51 COMPILER V9.60.7.0   LCD                                                               12/20/2023 18:42:43 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\lcd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lcd.c ROM(SMALL) OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\lcd.lst) TABS(2) OBJECT(.\Objects\lcd.obj)

line level    source

   1          #include <reg51.h>
   2          #include <string.h>
   3          
   4          #define LCD P2 /* Attached Lcd on Port */
   5          sbit rs = P3^5; /* Configure RS Pin */
   6          sbit rw = P3^6; /* Configure R/W pin */
   7          sbit e = P3^7; /* Configure Enable pin */
   8          
   9          sbit R1 = P1^0;     // Connecting keypad to Port 1
  10          sbit R2 = P1^1;
  11          sbit R3 = P1^2;
  12          sbit R4 = P1^3;
  13          sbit C1 = P1^4;
  14          sbit C2 = P1^5;
  15          sbit C3 = P1^6;
  16          /* Function to send a string through UART */
  17          void UART_SendString(const char *str) {
  18   1          while (*str != '\0') {
  19   2              SBUF = *str;     // Load data into the serial buffer
  20   2              while (TI == 0); // Wait until TX buffer is empty
  21   2              TI = 0;          // Clear transmit interrupt flag
  22   2              str++;
  23   2          }
  24   1      }
  25          
  26          
  27          /* Function to write command on Lcd */
  28          void lcd_cmd(const char cCommand);
  29          
  30          /* Function to display message on Lcd */
  31          void DisplayMessage(const char *pszMessage);
  32          
  33          /* Function To Initialize Lcd */
  34          void LcdInit(void);
  35          
  36          /* Function to Provide delay */
  37          void msdelay(unsigned int);
  38          
  39          /* Function to read keypad */
  40          int ReadKey(void);
  41          
  42          int row_finder1();
  43          int row_finder2();
  44          int row_finder3(); 
  45          int row_finder4();
  46          
  47          /* Function to move message on LCD */
  48          void MoveMessage(const char *pszMessage);
  49          
  50          /* Function to initialize UART */
  51          void UART_Init() {
  52   1          TMOD = 0x20; // Timer 1 in mode 2, 8-bit auto-reload
  53   1          TH1 = 0xFD;  // Baud rate = 9600 bps (for 11.0592 MHz crystal)
  54   1          SCON = 0x50; // 8-bit UART, enable reception
C51 COMPILER V9.60.7.0   LCD                                                               12/20/2023 18:42:43 PAGE 2   

  55   1          TR1 = 1;     // Start timer
  56   1      }
  57          
  58          /* Function to send a character through UART */
  59          void UART_SendChar(char c) {
  60   1          SBUF = c;
  61   1          while (TI == 0); // Wait until TX buffer is empty
  62   1          TI = 0;          // Clear transmit interrupt flag
  63   1      }
  64          
  65          
  66          int main()
  67          {
  68   1          short siLoop = 0;
  69   1          short siLen = 0;
  70   1          int key;
  71   1          const char *pszMessages[9] = {
  72   1              "Message 1",
  73   1              "Message 2",
  74   1              "Message 3",
  75   1              "Message 4",
  76   1              "Message 5",
  77   1              "Message 6",
  78   1              "Message 7",
  79   1              "Message 8",
  80   1              "Message 9"};
  81   1      
  82   1          LcdInit(); /* Lcd Initialize */
  83   1          UART_Init(); // Initialize UART
  84   1          while (1)
  85   1          {
  86   2              key = ReadKey(); /* Read key from keypad */
  87   2      
  88   2              if (key >= 1 && key <= 9)
  89   2                
  90   2                
  91   2              {
  92   3                int count1;
  93   3                const char *message =pszMessages[key - 1];
  94   3                for(count1 = 0; message[count1] != '\0'; count1++) 
  95   3          {
  96   4                      char character = message[count1]; // Access each character in the message
  97   4                      DisplayMessage(&character);       // Display each character    
  98   4                      msdelay(30);
  99   4          }
 100   3          for(count1 = 0; message[count1] != '\0'; count1++) 
 101   3          {
 102   4                      char character = message[count1]; // Access each character in the message
 103   4                      MoveMessage(&character);       // Display each character    
 104   4                      msdelay(30);
 105   4          }
 106   3          
 107   3          
 108   3              }
 109   2          }
 110   1      }
 111          
 112          /* Function to write command on Lcd */
 113          void lcd_cmd(const char cCommand)
 114          {
 115   1          rs = 0;
 116   1          rw = 0;
C51 COMPILER V9.60.7.0   LCD                                                               12/20/2023 18:42:43 PAGE 3   

 117   1          e = 1;
 118   1          LCD = cCommand;
 119   1          msdelay(1);
 120   1          e = 0;
 121   1      }
 122          
 123          /* Function to Display message on Lcd and PC */
 124          void DisplayMessage(const char *pszMessage) {
 125   1          while (*pszMessage != '\0') {
 126   2              rs = 1;
 127   2              rw = 0;
 128   2              e = 1;
 129   2              LCD = *pszMessage;
 130   2              msdelay(1);
 131   2              e = 0;
 132   2      
 133   2              // Send the character to PC through UART
 134   2              UART_SendChar(*pszMessage);
 135   2      
 136   2              pszMessage++;
 137   2          }
 138   1      }
 139          
 140          void msdelay(unsigned int time)  // Function for creating delay in milliseconds.
 141          
 142          {
 143   1          unsigned i,j ;
 144   1      
 145   1          for(i=0;i<time;i++)    
 146   1      
 147   1          for(j=0;j<1275;j++);
 148   1      }
 149          
 150          /* Initialise the LCD */
 151          void LcdInit()
 152          {
 153   1          /*(0x38);  // for using 2 lines and 5X7 matrix of LCD
 154   1      
 155   1          msdelay(10);
 156   1      
 157   1          lcd_cmd(0x0F);  // turn display ON, cursor blinking
 158   1      
 159   1          msdelay(10);
 160   1      
 161   1          lcd_cmd(0x01);  //clear screen
 162   1      
 163   1          msdelay(10);
 164   1      
 165   1          lcd_cmd(0x81);  // bring cursor to position 1 of line 1
 166   1      
 167   1          msdelay(10);*/
 168   1          lcd_cmd(0x01);
 169   1          lcd_cmd(0x38);
 170   1          lcd_cmd(0x06);
 171   1          lcd_cmd(0x0c);
 172   1      }
 173          
 174          /* Function to read keypad */
 175          int ReadKey()
 176          {
 177   1        int key = 0;
 178   1      
C51 COMPILER V9.60.7.0   LCD                                                               12/20/2023 18:42:43 PAGE 4   

 179   1        msdelay(30); 
 180   1      
 181   1        C1=C2=C3=1;
 182   1      
 183   1        R1=R2=R3=R4=0;
 184   1      
 185   1        if(C1==0)
 186   1          {
 187   2        lcd_cmd(0x01);
 188   2        key=row_finder1();
 189   2      }
 190   1        else if(C2==0){
 191   2        lcd_cmd(0x01);
 192   2      
 193   2        key=row_finder2();
 194   2      }
 195   1        else if(C3==0){
 196   2        lcd_cmd(0x01);
 197   2      
 198   2          key=row_finder3();
 199   2      }
 200   1        return key;
 201   1      }
 202          
 203          /* Function to move message on LCD */
 204          void MoveMessage(const char *pszMessage)
 205          {
 206   1          
 207   1              lcd_cmd(0x18); /* Shift Display Left */
 208   1              msdelay(30);       /* Adjust the delay as needed */
 209   1      
 210   1      }
*** WARNING C280 IN LINE 204 OF lcd.c: 'pszMessage': unreferenced local variable
 211          
 212          int row_finder1() //Function for finding the row for column 1
 213          
 214          {
 215   1      
 216   1      R1=R2=R3=R4=1;
 217   1      
 218   1      C1=C2=C3=0;
 219   1      
 220   1      
 221   1      if(R1==0)
 222   1      
 223   1      return 1;
 224   1      
 225   1      if(R2==0)
 226   1      
 227   1      return 4;
 228   1      
 229   1      if(R3==0)
 230   1      
 231   1      return 7;
 232   1      
 233   1      if(R4==0)
 234   1      
 235   1      return 15;
 236   1      
 237   1      }
 238          
 239          
C51 COMPILER V9.60.7.0   LCD                                                               12/20/2023 18:42:43 PAGE 5   

 240          int row_finder2() //Function for finding the row for column 2
 241          
 242          {
 243   1      
 244   1      R1=R2=R3=R4=1;
 245   1      
 246   1      C1=C2=C3=0;
 247   1      
 248   1      
 249   1      if(R1==0)
 250   1      
 251   1      return 2;
 252   1      if(R2==0)
 253   1      
 254   1      return 5;
 255   1      
 256   1      if(R3==0)
 257   1      
 258   1      return 8;
 259   1      
 260   1      if(R4==0)
 261   1      
 262   1      return 0;
 263   1      
 264   1      }
 265          
 266          
 267          int row_finder3() //Function for finding the row for column 3
 268          
 269          {
 270   1      
 271   1      R1=R2=R3=R4=1;
 272   1      
 273   1      C1=C2=C3=0;
 274   1      
 275   1      
 276   1      if(R1==0)
 277   1      return 3;
 278   1      
 279   1      if(R2==0)
 280   1      
 281   1      return 6;
 282   1      
 283   1      if(R3==0)
 284   1      
 285   1      return 9;
 286   1      
 287   1      if(R4==0)
 288   1      
 289   1      return 14;
 290   1      
 291   1      }
*** WARNING C291 IN LINE 237 OF lcd.c: not every exit path returns a value
*** WARNING C291 IN LINE 264 OF lcd.c: not every exit path returns a value
*** WARNING C291 IN LINE 291 OF lcd.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    543    ----
   CONSTANT SIZE    =    117    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   LCD                                                               12/20/2023 18:42:43 PAGE 6   

   DATA SIZE        =   ----      43
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
